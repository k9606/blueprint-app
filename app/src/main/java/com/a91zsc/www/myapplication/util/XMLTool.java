package com.a91zsc.www.myapplication.util;import android.content.Context;import android.net.Uri;import android.os.Handler;import android.webkit.WebView;import java.io.BufferedReader;import java.io.ByteArrayOutputStream;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import android.os.Message;import android.widget.Button;import net.sf.json.JSONObject;import static android.R.attr.button;import static android.R.attr.factor;import static android.R.attr.path;import static java.net.Proxy.Type.HTTP;/** * Created by yangx on 17.6.20. */public class XMLTool {    private String data = null;    /**     * 获取网络数据     *     * @return     */    public String code() {        new Thread() {            public void run() {                String strUrl = "https://third.91zsc.com/PrintApp/version.json";                try {                    URL url = new URL(strUrl);                    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();                    urlConnection.setConnectTimeout(5000);                    //设置对象链接超时                    urlConnection.setReadTimeout(5000);                    //获取对象获取超时                    urlConnection.setRequestMethod("GET");                    //设置本次请求方式                    urlConnection.connect();                    //链接                    int code = urlConnection.getResponseCode();                    if (code == 200) {                        //获取本次网络请求的状态码                        InputStream inStream = urlConnection.getInputStream();                        //获取本次访问的输出流                        BufferedReader reader = new BufferedReader(new InputStreamReader(inStream));                        //创建一个BufferedReder，去读数据                        String readLine;                        StringBuffer buffer = new StringBuffer();                        while ((readLine = reader.readLine()) != null) {                            buffer.append(readLine);                        }                        String result = buffer.toString();                        Message message = new Message();                        message.what = 0;                        message.obj = result;                        handler.sendMessage(message);                        inStream.close();                    } else {//                               button.setEnabled(false);                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        }.start();        return null;    }    Handler handler = new Handler() {        @Override        public void handleMessage(Message msg) {            super.handleMessage(msg);            String getResult1 = (String) msg.obj;            JSONObject json_test = JSONObject.fromObject(getResult1);            deitionconfig(json_test);        }    };    public void deitionconfig(JSONObject jsonObject) {    }}