package com.a91zsc.www.myapplication.util;import android.content.Context;import android.content.SharedPreferences;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.util.Log;import android.widget.Button;import android.widget.Toast;import com.a91zsc.www.myapplication.R;import com.a91zsc.www.myapplication.view.PrintDataActivity;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import java.io.IOException;import java.io.OutputStream;import java.nio.charset.Charset;import de.tavendo.autobahn.WebSocketConnection;import okhttp3.FormBody;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.RequestBody;import okhttp3.Response;import static android.content.Context.MODE_PRIVATE;import static com.a91zsc.www.myapplication.string.staticBluetoothData.resevre;import static com.a91zsc.www.myapplication.string.staticBluetoothData.restaurant;import static com.a91zsc.www.myapplication.string.staticBluetoothData.restaurantWaiter;import static com.a91zsc.www.myapplication.string.staticBluetoothData.sendTextMessageString;import static com.a91zsc.www.myapplication.string.staticBluetoothData.serviceBindURL;import static com.a91zsc.www.myapplication.string.staticBluetoothData.socketClose;import static com.a91zsc.www.myapplication.string.staticBluetoothData.takoutFood;/** * Created by yangx on 17.8.3. */public class printUtils {    public JSONObject shop;    public String shop_name;    public String booking_sales;    public String people;    public String orderno;    public String ordertime;    public String entertime;    public JSONArray order_detail;    public JSONArray partner_detail;    public String should;    public String total;    public String contact;    public String tel;    public String promotions;    public String memo;    public String pay_type;    public String address;    public String order_type;    public String shoporder_sales;    public String table_number;    public JSONObject order_type_Name = null;    private String responseData;    private JSONObject jsonObject;    private String code;    private static final String CODEIS = "code";    private static OutputStream outputStreamOut = null;    private static WebSocketConnection webSocketConnection = null;    public static final String USER = "user";    private static final int LEFT_TEXT_MAX_LENGTH = 99;    public static final byte[] RESET = {0x1b, 0x40};    /**     * 左对齐     */    public static final byte[] ALIGN_LEFT = {0x1b, 0x61, 0x00};    /**     * 中间对齐     */    public static final byte[] ALIGN_CENTER = {0x1b, 0x61, 0x01};    /**     * 右对齐     */    public static final byte[] ALIGN_RIGHT = {0x1b, 0x61, 0x02};    /**     * 选择加粗模式     */    public static final byte[] BOLD = {0x1b, 0x45, 0x01};    /**     * 取消加粗模式     */    public static final byte[] BOLD_CANCEL = {0x1b, 0x45, 0x00};    /**     * 宽高加倍     */    public static final byte[] DOUBLE_HEIGHT_WIDTH = {0x1d, 0x21, 0x11};    /**     * 宽加倍     */    public static final byte[] DOUBLE_WIDTH = {0x1d, 0x21, 0x10};    /**     * 高加倍     */    public static final byte[] DOUBLE_HEIGHT = {0x1d, 0x21, 0x01};    /**     * 字体不放大     */    public static final byte[] NORMAL = {0x1d, 0x21, 0x00};    /**     * 设置默认行间距     */    public static final byte[] LINE_SPACING_DEFAULT = {0x1b, 0x32};    /**     * 打印纸一行最大的字节     */    private static final int LINE_BYTE_SIZE = 32;    /**     * 打印三列时，中间一列的中心线距离打印纸左侧的距离     */    private static final int LEFT_LENGTH = 16;    /**     * 打印三列时，中间一列的中心线距离打印纸右侧的距离     */    private static final int RIGHT_LENGTH = 16;    public String isPutOut = "true";    showTime util = new showTime();    /**     * 模式设计     *     * @param leftText     * @param rightText     * @return     */    public static String printTwoData(String leftText, String rightText) {        StringBuilder sb = new StringBuilder();        int leftTextLength = getBytesLength(leftText);        int rightTextLength = getBytesLength(rightText);        sb.append(leftText);        int marginBetweenMiddleAndRight = LINE_BYTE_SIZE - leftTextLength - rightTextLength;        for (int i = 0; i < marginBetweenMiddleAndRight; i++) {            sb.append(" ");        }        sb.append(rightText);        return sb.toString();    }    /**     * 模式设计     *     * @param msg     * @return     */    private static int getBytesLength(String msg) {        return msg.getBytes(Charset.forName("GB2312")).length;    }    /**     * 模式设计     *     * @param leftText     * @param middleText     * @param rightText     * @return     */    public static String printThreeData(String leftText, String middleText, String rightText) {        StringBuilder sb = new StringBuilder();        // 左边最多显示 LEFT_TEXT_MAX_LENGTH 个汉字 + 两个点        if (leftText.length() > LEFT_TEXT_MAX_LENGTH) {            leftText = leftText.substring(0, LEFT_TEXT_MAX_LENGTH) + "..";        }        int leftTextLength = getBytesLength(leftText);        int middleTextLength = getBytesLength(middleText);        int rightTextLength = getBytesLength(rightText);        sb.append(leftText);        // 计算左侧文字和中间文字的空格长度        //int marginBetweenLeftAndMiddle = LEFT_LENGTH - leftTextLength - middleTextLength / 2;        if (leftTextLength > 20) {            sb.append("\n");        } else {            for (int i = 0; i < 20 - leftTextLength; i++) {                sb.append(" ");            }        }        sb.append(middleText);        // 计算右侧文字和中间文字的空格长度        //int marginBetweenMiddleAndRight = RIGHT_LENGTH - middleTextLength / 2 - rightTextLength;        for (int i = 0; i < 10 - rightTextLength; i++) {            sb.append(" ");        }        // 打印的时候发现，最右边的文字总是偏右一个字符，所以需要删除一个空格        sb.delete(sb.length() - 1, sb.length()).append(rightText);        return sb.toString();    }    /**     * 订单打印处理     *     * @param jsonObject     * @param order     */    public void waiterdiannei(JSONObject jsonObject, JSONObject order) {        shop = jsonObject.getJSONObject("shop");        shop_name = shop.getString("name");        shoporder_sales = order.getString("day_no");        table_number = order.getString("table_number");        orderno = order.getString("orderno");        ordertime = order.getString("ordertime");        order_detail = jsonObject.getJSONArray("order_detail");        should = order.getString("should");        total = order.getString("total");        promotions = order.getString("promotions");        pay_type = order.getString("pay_type");        pay_type = (pay_type.equals("现金支付")) ? "(未付款)" : "(已付款)";        memo = order.getString("memo");        send("", RESET);        send(shop_name + "\n", ALIGN_CENTER);        send("", RESET);        send(printTwoData("店内(服务员):" + shoporder_sales, "桌号：" + table_number) + "\n", DOUBLE_HEIGHT);        send("", RESET);        send("--------------------------------" + "\n", RESET);        send("", RESET);        send("订单号：" + orderno + "\n", ALIGN_LEFT);        send("", RESET);        send("点餐时间：" + ordertime + "\n", ALIGN_LEFT);        send("", RESET);        if (memo != "") {            send("", RESET);            send("", ALIGN_LEFT);            send("其他要求：" + memo + "\n", DOUBLE_HEIGHT_WIDTH);        }        send("--------------------------------" + "\n", RESET);        send("", RESET);        for (int i = 0; i < order_detail.size(); i++) {            JSONObject info = order_detail.getJSONObject(i);            send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);        }        send("", RESET);        send("--------------------------------" + "\n", RESET);        send("", RESET);        send("合计：" + should + "\n", ALIGN_RIGHT);        send("", RESET);        if (promotions != "") {            send("", RESET);            send("优惠：" + promotions + "\n", ALIGN_RIGHT);        }        send("", RESET);        send("", ALIGN_RIGHT);        send("实付：" + total + pay_type + "\n", DOUBLE_HEIGHT);        send("", RESET);        send("--------------------------------" + "\n", RESET);        send("", RESET);        send("\n", RESET);        send("\n", RESET);        send("\n", RESET);    }    public void diannei(JSONObject jsonObject, JSONObject order) {        shop = jsonObject.getJSONObject("shop");        shop_name = shop.getString("name");        shoporder_sales = order.getString("day_no");        table_number = order.getString("table_number");        orderno = order.getString("orderno");        ordertime = order.getString("ordertime");        order_detail = jsonObject.getJSONArray("order_detail");        should = order.getString("should");        total = order.getString("total");        promotions = order.getString("promotions");        pay_type = order.getString("pay_type");        pay_type = (pay_type.equals("现金支付")) ? "(未付款)" : "(已付款)";        memo = order.getString("memo");        send("", RESET);        send(shop_name + "\n", ALIGN_CENTER);        send("", RESET);        send(printTwoData("店内：" + shoporder_sales, "桌号：" + table_number) + "\n", DOUBLE_HEIGHT);        send("", RESET);        send("--------------------------------" + "\n", RESET);        send("", RESET);        send("订单号：" + orderno + "\n", ALIGN_LEFT);        send("", RESET);        send("点餐时间：" + ordertime + "\n", ALIGN_LEFT);        send("", RESET);        if (memo != "") {            send("", RESET);            send("", ALIGN_LEFT);            send("其他要求：" + memo + "\n", DOUBLE_HEIGHT_WIDTH);        }        send("--------------------------------" + "\n", RESET);        send("", RESET);//        if("".equals(jsonArrayID.toString())){        for (int i = 0; i < order_detail.size(); i++) {            JSONObject info = order_detail.getJSONObject(i);            send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);        }        send("", RESET);        send("--------------------------------" + "\n", RESET);        send("", RESET);        send("合计：" + should + "\n", ALIGN_RIGHT);        send("", RESET);        if (promotions != "") {            send("", RESET);            send("优惠：" + promotions + "\n", ALIGN_RIGHT);        }        send("", RESET);        send("", ALIGN_RIGHT);        send("实付：" + total + pay_type + "\n", DOUBLE_HEIGHT);        send("", RESET);        send("--------------------------------" + "\n", RESET);        send("", RESET);        send("\n", RESET);        send("\n", RESET);        send("\n", RESET);    }    public void waimai(JSONObject jsonObject, JSONObject order) {        order_type = order.getString("order_type");        orderno = order.getString("orderno");        ordertime = order.getString("ordertime");        people = order.getString("people");        should = order.getString("should");        total = order.getString("total");        pay_type = order.getString("pay_type");        pay_type = (pay_type.equals("现金支付")) ? "(未付款)" : "(已付款)";        promotions = order.getString("promotions");        memo = order.getString("memo");        contact = order.getString("contact");        tel = order.getString("tel");        address = order.getString("address");        JSONArray order_detail = jsonObject.getJSONArray("order_detail");        JSONObject shop = jsonObject.getJSONObject("shop");        String shop_name = shop.getString("name");        String takeout_sales = order.getString("day_no");        send("1", RESET);        send(shop_name + "\n", ALIGN_CENTER);        send("1", RESET);        send("1", ALIGN_CENTER);        send(order_type + ":" + takeout_sales + "\n", DOUBLE_HEIGHT);        send("1", RESET);        send("--------------------------------" + "\n", RESET);        send("用餐人数：" + people + "\n", ALIGN_LEFT);        send("1", RESET);        send("订单号：" + orderno + "\n", ALIGN_LEFT);        send("1", RESET);        send("点餐时间：" + ordertime + "\n", ALIGN_LEFT);        send("1", RESET);        if (memo != "") {            send("", RESET);            send("", ALIGN_LEFT);            send("其他要求：" + memo + "\n", DOUBLE_HEIGHT_WIDTH);        }        send("--------------------------------" + "\n", RESET);        send("", RESET);        for (int i = 0; i < order_detail.size(); i++) {            JSONObject info = order_detail.getJSONObject(i);            send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);        }        send("1", RESET);        send("--------------------------------" + "\n", RESET);        send("合计：" + should + "\n", ALIGN_RIGHT);        send("1", RESET);        if (promotions != "") {            send("优惠：" + promotions + "\n", ALIGN_RIGHT);            send("", RESET);            send("", ALIGN_RIGHT);        }        send("1", RESET);        send("1", ALIGN_RIGHT);        send("实付：" + total + pay_type + "\n", DOUBLE_HEIGHT);        send("", RESET);        send("--------------------------------" + "\n", RESET);        send(contact + "\n", DOUBLE_HEIGHT_WIDTH);        send("", RESET);        send(tel + "\n", DOUBLE_HEIGHT_WIDTH);        send("", RESET);        send(address + "\n", DOUBLE_HEIGHT_WIDTH);        send("\n", RESET);        send("\n", RESET);        send("\n", RESET);    }    public void yuding(JSONObject jsonObject, JSONObject order) {        this.shop = jsonObject.getJSONObject("shop");        Log.e("test", shop + "");        this.shop_name = shop.getString("name");        this.booking_sales = order.getString("day_no");        this.people = order.getString("people");        this.orderno = order.getString("orderno");        this.ordertime = order.getString("ordertime");        this.entertime = order.getString("entertime");        this.order_detail = jsonObject.getJSONArray("order_detail");        this.should = order.getString("should");        this.total = order.getString("total");        this.contact = order.getString("contact");        this.tel = order.getString("tel");        this.promotions = order.getString("promotions");        this.memo = order.getString("memo");        this.pay_type = order.getString("pay_type");        this.pay_type = (pay_type.equals("现金支付")) ? "(未付款)" : "(已付款)";        send("", RESET);        send(shop_name + "\n", ALIGN_CENTER);        send("", RESET);        send("", ALIGN_CENTER);        send("预订：" + booking_sales + "\n", DOUBLE_HEIGHT);        send("", RESET);        send("--------------------------------" + "\n", RESET);        send("用餐人数：" + people + "\n", ALIGN_LEFT);        send("", RESET);        send("订单号：" + orderno + "\n", ALIGN_LEFT);        send("", RESET);        send("点餐时间：" + ordertime + "\n", ALIGN_LEFT);        send("", RESET);        send("到店时间：" + entertime + "\n", ALIGN_LEFT);        if (memo != "") {            send("", RESET);            send("", ALIGN_LEFT);            send("其他要求：" + memo + "\n", DOUBLE_HEIGHT_WIDTH);        }        send("", RESET);        send("--------------------------------" + "\n", RESET);        for (int i = 0; i < order_detail.size(); i++) {            JSONObject info = order_detail.getJSONObject(i);            send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);        }        send("", RESET);        send("--------------------------------" + "\n", RESET);        send("合计：" + should + "\n", ALIGN_RIGHT);        send("", RESET);        if (promotions != "") {            send("优惠：" + promotions + "\n", ALIGN_RIGHT);            send("", RESET);            send("", ALIGN_RIGHT);        }        send("", RESET);        send("", ALIGN_RIGHT);        send("实付：" + total + pay_type + "\n", DOUBLE_HEIGHT);        send("", RESET);        send("--------------------------------" + "\n", RESET);        send(contact + "\n", DOUBLE_HEIGHT_WIDTH);        send("", RESET);        send(tel + "\n", DOUBLE_HEIGHT_WIDTH);        send("\n", RESET);        send("\n", RESET);        send("\n", RESET);    }    public void bind(String msg, Context context) {        SharedPreferences sharedPreferences = context.getSharedPreferences(USER, MODE_PRIVATE);        final String account = sharedPreferences.getString("acc", "");        final String client_id = msg;        new Thread(new Runnable() {            @Override            public void run() {                try {                    OkHttpClient client = new OkHttpClient();                    RequestBody requestBody = new FormBody.Builder()                            .add("account", account)                            .add("client_id", client_id)                            .build();                    Request request = new Request.Builder()                            .url(serviceBindURL)                            .post(requestBody)                            .build();                    Response response = client.newCall(request).execute();                    responseData = response.body().string();                    jsonObject = JSONObject.fromObject(responseData);                    code = jsonObject.getString(CODEIS);                    Log.e("BindData",jsonObject+"");                    if (code.equals("200")) {                        JSONArray orderData = jsonObject.getJSONArray("data");                        Log.e("orderData",orderData+""+orderData.size());                        for (int i = 0; i < orderData.size(); i++) {                            order_type_Name = orderData.getJSONObject(i);                            JSONObject order_type = order_type_Name.getJSONObject("order");                            String order_ttyp = order_type.getString("order_type");                            switch (order_ttyp) {                                case takoutFood:                                    waimai(jsonObject, order_type);                                    break;                                case restaurant:                                    diannei(jsonObject, order_type);                                    break;                                case restaurantWaiter:                                    waiterdiannei(jsonObject, order_type);                                    break;                                case resevre:                                    yuding(jsonObject, order_type);                                    break;                                default:                                    System.out.println("default");                                    break;                            }                        }                    } else if (code.equals("201")) {                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        }).start();    }    public void closeSocket(Context context) {        this.webSocketConnection = null;        this.outputStreamOut = null;        SharedPreferences sharedPreferences = context.getSharedPreferences(USER, MODE_PRIVATE);        final String user = sharedPreferences.getString("acc", "");        new Thread() {            public void run() {                try {                    OkHttpClient client = new OkHttpClient();                    RequestBody requestBody = new FormBody.Builder()                            .add("account", user)                            .build();                    Request request = new Request.Builder()                            .url(socketClose)                            .post(requestBody)                            .build();                    Response response = client.newCall(request).execute();                    Log.e("Response", response + "");                } catch (Exception e) {                    e.printStackTrace();                }            }        }.start();    }    public void IntentOutPut(WebSocketConnection wsC, OutputStream outputStream) {            Log.e("IntentOutPut","获取到输入流的对象");            webSocketConnection = wsC;            outputStreamOut = outputStream;    }    public void heartbeat() {        new Thread(new Runnable() {            @Override            public void run() {                webSocketConnection.sendTextMessage("pong");            }        }).start();    }    public void test() {        if(webSocketConnection!=null){            webSocketConnection.sendTextMessage(sendTextMessageString);        }    }    public void sendInfo(String sendData) {//        if(outputStreamOut!=null){            try {                byte[] data = sendData.getBytes("gbk");                outputStreamOut.write(data, 0, data.length);                outputStreamOut.flush();            } catch (IOException e) {//            }        }    }    public void send(String sendData, byte[] command) {//        if(outputStreamOut!=null){            try {                byte[] data = sendData.getBytes("gbk");                outputStreamOut.write(command);                outputStreamOut.write(data, 0, data.length);            } catch (IOException e) {            }    }    public void setButton(){        PrintDataActivity.saveSet.setEnabled(true);        PrintDataActivity.send.setEnabled(true);        Log.e("Hello","设置按钮可点击");    }}