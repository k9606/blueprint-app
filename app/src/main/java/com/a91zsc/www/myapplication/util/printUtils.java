package com.a91zsc.www.myapplication.util;import android.app.ActivityManager;import android.content.Context;import android.content.SharedPreferences;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.util.Log;import android.widget.Button;import android.widget.Toast;import com.a91zsc.www.myapplication.R;import com.a91zsc.www.myapplication.application.CustomApplication;import com.a91zsc.www.myapplication.view.PrintDataActivity;import net.sf.json.JSONArray;import net.sf.json.JSONException;import net.sf.json.JSONObject;import java.io.IOException;import java.io.OutputStream;import java.nio.charset.Charset;import java.util.List;import de.tavendo.autobahn.WebSocketConnection;import okhttp3.FormBody;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.RequestBody;import okhttp3.Response;import static android.content.Context.MODE_PRIVATE;import static com.a91zsc.www.myapplication.service.PrintDataService.context;import static com.a91zsc.www.myapplication.string.staticBluetoothData.BluetoothSocketSend;import static com.a91zsc.www.myapplication.string.staticBluetoothData.BluetoothprintSend;import static com.a91zsc.www.myapplication.string.staticBluetoothData.resevre;import static com.a91zsc.www.myapplication.string.staticBluetoothData.restaurant;import static com.a91zsc.www.myapplication.string.staticBluetoothData.restaurantWaiter;import static com.a91zsc.www.myapplication.string.staticBluetoothData.sendTextMessageString;import static com.a91zsc.www.myapplication.string.staticBluetoothData.serviceBindURL;import static com.a91zsc.www.myapplication.string.staticBluetoothData.socketClose;import static com.a91zsc.www.myapplication.string.staticBluetoothData.takoutFood;/** * Created by yangx on 17.8.3. */public class printUtils {    public String booking_sales;    public String people;    public String orderno;    public String ordertime;    public String entertime;    public JSONArray order_detail;    public JSONArray partner_detail;    public String should;    public String total;    public String contact;    public String tel;    public String promotions;    public String memo;    public String pay_type;    public String address;    public String order_type;    public String shoporder_sales;    public String table_number;    private String responseData;    private String code;    public String oderTypeId = "";    public static final String PONG = "pong";    toolsFileIO tlfo = new toolsFileIO();    JSONArray orderData = null;    private static OutputStream outputStreamOut = null;    public static WebSocketConnection webSocketConnection = null;    private static final int LEFT_TEXT_MAX_LENGTH = 99;    JSONObject order_type_data = null, jsonObject = null, order_type_Name = null, shop = null;    showTime util = new showTime();    String shop_name, takeout_sales;    JSONArray dataJson = new JSONArray();    int isTextType = 0;    private boolean isTypeJson = true;    public String order_ttyp = null;    public static final byte[] RESET = {0x1b, 0x40};    public static final byte[] ALIGN_LEFT = {0x1b, 0x61, 0x00};    public static final byte[] ALIGN_CENTER = {0x1b, 0x61, 0x01};    public static final byte[] ALIGN_RIGHT = {0x1b, 0x61, 0x02};    public static final byte[] DOUBLE_HEIGHT_WIDTH = {0x1d, 0x21, 0x11};    public static final byte[] DOUBLE_HEIGHT = {0x1d, 0x21, 0x01};    private static final int LINE_BYTE_SIZE = 32;    public void clear() {        if (jsonObject != null) {            jsonObject.clear();            order_detail.clear();            partner_detail.clear();        }    }    public static String printTwoData(String leftText, String rightText) {        StringBuilder sb = new StringBuilder();        int leftTextLength = getBytesLength(leftText);        int rightTextLength = getBytesLength(rightText);        sb.append(leftText);        int marginBetweenMiddleAndRight = LINE_BYTE_SIZE - leftTextLength - rightTextLength;        for (int i = 0; i < marginBetweenMiddleAndRight; i++) {            sb.append(" ");        }        sb.append(rightText);        return sb.toString();    }    private static int getBytesLength(String msg) {        return msg.getBytes(Charset.forName("GB2312")).length;    }    public static String printThreeData(String leftText, String middleText, String rightText) {        StringBuilder sb = new StringBuilder();        // 左边最多显示 LEFT_TEXT_MAX_LENGTH 个汉字 + 两个点        if (leftText.length() > LEFT_TEXT_MAX_LENGTH) {            leftText = leftText.substring(0, LEFT_TEXT_MAX_LENGTH) + "..";        }        int leftTextLength = getBytesLength(leftText);        int middleTextLength = getBytesLength(middleText);        int rightTextLength = getBytesLength(rightText);        sb.append(leftText);        // 计算左侧文字和中间文字的空格长度        //int marginBetweenLeftAndMiddle = LEFT_LENGTH - leftTextLength - middleTextLength / 2;        if (leftTextLength > 20) {            sb.append("\n");        } else {            for (int i = 0; i < 20 - leftTextLength; i++) {                sb.append(" ");            }        }        sb.append(middleText);        // 计算右侧文字和中间文字的空格长度        //int marginBetweenMiddleAndRight = RIGHT_LENGTH - middleTextLength / 2 - rightTextLength;        for (int i = 0; i < 10 - rightTextLength; i++) {            sb.append(" ");        }        // 打印的时候发现，最右边的文字总是偏右一个字符，所以需要删除一个空格        sb.delete(sb.length() - 1, sb.length()).append(rightText);        return sb.toString();    }    public void waiterdiannei(JSONObject jsonObject, JSONObject order, int in) {        shop = jsonObject.getJSONObject("shop");        shop_name = shop.getString("name");        shoporder_sales = order.getString("day_no");        table_number = order.getString("table_number");        orderno = order.getString("orderno");        ordertime = order.getString("ordertime");        order_detail = jsonObject.getJSONArray("order_detail");        partner_detail = jsonObject.getJSONArray("partner_detail");        should = order.getString("should");        total = order.getString("total");        promotions = order.getString("promotions");        pay_type = order.getString("pay_type");        pay_type = (pay_type.equals("现金支付")) ? "(未付款)" : "(已付款)";        memo = order.getString("memo");        for (int number = 0; number < in; number++) {            new Thread(new Runnable() {                @Override                public void run() {                    send("", RESET);                    send(shop_name + "\n", ALIGN_CENTER);                    send("", RESET);                    send("", RESET);                    send(printTwoData("店内(服务员):" + shoporder_sales, "桌号：" + table_number) + "\n", DOUBLE_HEIGHT);                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    send("", RESET);                    send("订单号：" + orderno + "\n", ALIGN_LEFT);                    send("", RESET);                    send("点餐时间：" + ordertime + "\n", ALIGN_LEFT);                    send("", RESET);                    if (memo != "") {                        send("", RESET);                        send("", ALIGN_LEFT);                        send("其他要求：" + memo + "\n", DOUBLE_HEIGHT_WIDTH);                    }                    send("--------------------------------" + "\n", RESET);                    if (dataJson == null) {                        for (int i = 0; i < order_detail.size(); i++) {                            JSONObject info = order_detail.getJSONObject(i);                            send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                        }                        for (int i = 0; i < partner_detail.size(); i++) {                            JSONObject info = partner_detail.getJSONObject(i);                            send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                        }                    } else {                        for (int i = 0; i < order_detail.size(); i++) {                            JSONObject info = order_detail.getJSONObject(i);                            String k1 = info.getString("type_id");                            for (int inl = 0; inl < dataJson.size(); inl++) {                                JSONObject json = dataJson.getJSONObject(inl);                                String k2 = json.getString("id");                                if (k2.equals(k1)) {                                    send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                                    break;                                }                            }                        }                        for (int i = 0; i < partner_detail.size(); i++) {                            JSONObject info = partner_detail.getJSONObject(i);                            String k1 = info.getString("partner_id");                            for (int inl = 0; inl < dataJson.size(); inl++) {                                JSONObject json = dataJson.getJSONObject(inl);                                String k2 = json.getString("id");                                if (k2.equals(k1)) {                                    send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                                    break;                                }                            }                        }                    }                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    send("", RESET);                    send("合计：" + should + "\n", ALIGN_RIGHT);                    send("", RESET);                    if (promotions != "") {                        send("", RESET);                        send("优惠：" + promotions + "\n", ALIGN_RIGHT);                    }                    send("", RESET);                    send("", ALIGN_RIGHT);                    send("实付：" + total + pay_type + "\n", DOUBLE_HEIGHT);                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    send("", RESET);                    send("\n", RESET);                    send("\n", RESET);                    send("\n", RESET);                }            }).start();            if (!oderTypeId.equals(orderno)) {                responJson(orderno);                oderTypeId = orderno;            }            util.Delayed(4000);        }        jsonObject.clear();        order.clear();        clear();    }    public void diannei(JSONObject jsonObject, JSONObject order, int in) {        shop = jsonObject.getJSONObject("shop");        shop_name = shop.getString("name");        shoporder_sales = order.getString("day_no");        table_number = order.getString("table_number");        orderno = order.getString("orderno");        ordertime = order.getString("ordertime");        order_detail = jsonObject.getJSONArray("order_detail");        partner_detail = jsonObject.getJSONArray("partner_detail");        should = order.getString("should");        total = order.getString("total");        promotions = order.getString("promotions");        pay_type = order.getString("pay_type");        pay_type = (pay_type.equals("现金支付")) ? "(未付款)" : "(已付款)";        memo = order.getString("memo");        for (int number = 0; number < in; number++) {            new Thread(new Runnable() {                @Override                public void run() {                    send("", RESET);                    send(shop_name + "\n", ALIGN_CENTER);                    send("", ALIGN_CENTER);                    send("", RESET);                    send(printTwoData("店内：" + shoporder_sales, "桌号：" + table_number) + "\n", DOUBLE_HEIGHT);                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    send("", RESET);                    send("订单号：" + orderno + "\n", ALIGN_LEFT);                    send("", RESET);                    send("点餐时间：" + ordertime + "\n", ALIGN_LEFT);                    send("", RESET);                    if (memo != "") {                        send("", RESET);                        send("", ALIGN_LEFT);                        send("其他要求：" + memo + "\n", DOUBLE_HEIGHT_WIDTH);                    }                    send("--------------------------------" + "\n", RESET);                    if (dataJson == null) {                        for (int i = 0; i < order_detail.size(); i++) {                            JSONObject info = order_detail.getJSONObject(i);                            send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                        }                        for (int i = 0; i < partner_detail.size(); i++) {                            JSONObject info = partner_detail.getJSONObject(i);                            send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                        }                    } else {                        for (int i = 0; i < order_detail.size(); i++) {                            JSONObject info = order_detail.getJSONObject(i);                            String k1 = info.getString("type_id");                            for (int inl = 0; inl < dataJson.size(); inl++) {                                JSONObject json = dataJson.getJSONObject(inl);                                String k2 = json.getString("id");                                if (k2.equals(k1)) {                                    send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                                    break;                                }                            }                        }                        for (int i = 0; i < partner_detail.size(); i++) {                            JSONObject info = partner_detail.getJSONObject(i);                            String k1 = info.getString("partner_id");                            for (int inl = 0; inl < dataJson.size(); inl++) {                                JSONObject json = dataJson.getJSONObject(inl);                                String k2 = json.getString("id");                                if (k2.equals(k1)) {                                    send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                                    break;                                }                            }                        }                    }                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    send("", RESET);                    send("合计：" + should + "\n", ALIGN_RIGHT);                    send("", RESET);                    if (promotions != "") {                        send("", RESET);                        send("优惠：" + promotions + "\n", ALIGN_RIGHT);                    }                    send("", RESET);                    send("", ALIGN_RIGHT);                    send("实付：" + total + pay_type + "\n", DOUBLE_HEIGHT);                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    send("", RESET);                    send("\n", RESET);                    send("\n", RESET);                    send("\n", RESET);                }            }).start();            if (!oderTypeId.equals(orderno)) {                responJson(orderno);                oderTypeId = orderno;            }            util.Delayed(4000);        }        jsonObject.clear();        order.clear();        clear();    }    public void waimai(JSONObject jsonObject, JSONObject order, int in) {        order_type = order.getString("order_type");        orderno = order.getString("orderno");        ordertime = order.getString("ordertime");        people = order.getString("people");        should = order.getString("should");        total = order.getString("total");        pay_type = order.getString("pay_type");        pay_type = (pay_type.equals("现金支付")) ? "(未付款)" : "(已付款)";        promotions = order.getString("promotions");        memo = order.getString("memo");        contact = order.getString("contact");        tel = order.getString("tel");        address = order.getString("address");        order_detail = jsonObject.getJSONArray("order_detail");        partner_detail = jsonObject.getJSONArray("partner_detail");        shop = jsonObject.getJSONObject("shop");        shop_name = shop.getString("name");        takeout_sales = order.getString("day_no");        for (int number = 0; number < in; number++) {            new Thread(new Runnable() {                @Override                public void run() {                    send("", RESET);                    send(shop_name + "\n", ALIGN_CENTER);                    send("", RESET);                    send("", ALIGN_CENTER);                    send(order_type + ":" + takeout_sales + "\n", DOUBLE_HEIGHT);                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    send("用餐人数：" + people + "\n", ALIGN_LEFT);                    send("", RESET);                    send("订单号：" + orderno + "\n", ALIGN_LEFT);                    send("", RESET);                    send("点餐时间：" + ordertime + "\n", ALIGN_LEFT);                    send("", RESET);                    if (memo != "") {                        send("", RESET);                        send("", ALIGN_LEFT);                        send("其他要求：" + memo + "\n", DOUBLE_HEIGHT_WIDTH);                    }                    send("--------------------------------" + "\n", RESET);                    send("", RESET);                    if (dataJson == null) {                        for (int i = 0; i < order_detail.size(); i++) {                            JSONObject info = order_detail.getJSONObject(i);                            send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                        }                        for (int i = 0; i < partner_detail.size(); i++) {                            JSONObject info = partner_detail.getJSONObject(i);                            send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                        }                    } else {                        for (int i = 0; i < order_detail.size(); i++) {                            JSONObject info = order_detail.getJSONObject(i);                            String k1 = info.getString("type_id");                            for (int inl = 0; inl < dataJson.size(); inl++) {                                JSONObject json = dataJson.getJSONObject(inl);                                String k2 = json.getString("id");                                if (k2.equals(k1)) {                                    send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                                    break;                                }                            }                        }                        for (int i = 0; i < partner_detail.size(); i++) {                            JSONObject info = partner_detail.getJSONObject(i);                            String k1 = info.getString("partner_id");                            for (int inl = 0; inl < dataJson.size(); inl++) {                                JSONObject json = dataJson.getJSONObject(inl);                                String k2 = json.getString("id");                                if (k2.equals(k1)) {                                    send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                                    break;                                }                            }                        }                    }                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    send("合计：" + should + "\n", ALIGN_RIGHT);                    send("", RESET);                    if (promotions != "") {                        send("优惠：" + promotions + "\n", ALIGN_RIGHT);                        send("", RESET);                        send("", ALIGN_RIGHT);                    }                    send("", RESET);                    send("", ALIGN_RIGHT);                    send("实付：" + total + pay_type + "\n", DOUBLE_HEIGHT);                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    send(contact + "\n", DOUBLE_HEIGHT_WIDTH);                    send("", RESET);                    send(tel + "\n", DOUBLE_HEIGHT_WIDTH);                    send("", RESET);                    send(address + "\n", DOUBLE_HEIGHT_WIDTH);                    send("\n", RESET);                    send("\n", RESET);                    send("\n", RESET);                }            }).start();            if (!oderTypeId.equals(orderno)) {                responJson(orderno);                oderTypeId = orderno;            }            util.Delayed(4000);        }        jsonObject.clear();        order.clear();        clear();    }    public void yuding(JSONObject jsonObject, JSONObject order, int in) {        shop = jsonObject.getJSONObject("shop");        shop_name = shop.getString("name");        people = order.getString("people");        orderno = order.getString("orderno");        ordertime = order.getString("ordertime");        entertime = order.getString("entertime");        booking_sales = order.getString("day_no");        order_detail = jsonObject.getJSONArray("order_detail");        partner_detail = jsonObject.getJSONArray("partner_detail");        should = order.getString("should");        total = order.getString("total");        contact = order.getString("contact");        tel = order.getString("tel");        promotions = order.getString("promotions");        memo = order.getString("memo");        pay_type = order.getString("pay_type");        pay_type = (pay_type.equals("现金支付")) ? "(未付款)" : "(已付款)";        for (int number = 0; number < in; number++) {            new Thread(new Runnable() {                @Override                public void run() {                    send("", RESET);                    send(shop_name + "\n", ALIGN_CENTER);                    send("", RESET);                    send("", ALIGN_CENTER);                    send("预订：" + booking_sales + "\n", DOUBLE_HEIGHT);                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    send("用餐人数：" + people + "\n", ALIGN_LEFT);                    send("", RESET);                    send("订单号：" + orderno + "\n", ALIGN_LEFT);                    send("", RESET);                    send("点餐时间：" + ordertime + "\n", ALIGN_LEFT);                    send("", RESET);                    send("到店时间：" + entertime + "\n", ALIGN_LEFT);                    if (memo != "") {                        send("", RESET);                        send("", ALIGN_LEFT);                        send("其他要求：" + memo + "\n", DOUBLE_HEIGHT_WIDTH);                    }                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    Log.e("分类类型", dataJson + "");                    if (dataJson == null) {                        for (int i = 0; i < order_detail.size(); i++) {                            JSONObject info = order_detail.getJSONObject(i);                            send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                        }                        for (int i = 0; i < partner_detail.size(); i++) {                            JSONObject info = partner_detail.getJSONObject(i);                            send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                        }                    } else {                        for (int i = 0; i < order_detail.size(); i++) {                            JSONObject info = order_detail.getJSONObject(i);                            String k1 = info.getString("type_id");                            for (int inl = 0; inl < dataJson.size(); inl++) {                                JSONObject json = dataJson.getJSONObject(inl);                                String k2 = json.getString("id");                                if (k2.equals(k1)) {                                    send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                                    break;                                }                            }                        }                        for (int i = 0; i < partner_detail.size(); i++) {                            JSONObject info = partner_detail.getJSONObject(i);                            String k1 = info.getString("partner_id");                            for (int inl = 0; inl < dataJson.size(); inl++) {                                JSONObject json = dataJson.getJSONObject(inl);                                String k2 = json.getString("id");                                if (k2.equals(k1)) {                                    send(printThreeData(info.getString("goods_name"), "X " + info.getString("qty") + " ", info.getString("price") + "\n"), DOUBLE_HEIGHT);                                    break;                                }                            }                        }                    }                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    send("合计：" + should + "\n", ALIGN_RIGHT);                    send("", RESET);                    if (promotions != "") {                        send("优惠：" + promotions + "\n", ALIGN_RIGHT);                        send("", RESET);                        send("", ALIGN_RIGHT);                    }                    send("", RESET);                    send("", ALIGN_RIGHT);                    send("实付：" + total + pay_type + "\n", DOUBLE_HEIGHT);                    send("", RESET);                    send("--------------------------------" + "\n", RESET);                    send(contact + "\n", DOUBLE_HEIGHT_WIDTH);                    send("", RESET);                    send(tel + "\n", DOUBLE_HEIGHT_WIDTH);                    send("\n", RESET);                    send("\n", RESET);                    send("\n", RESET);                }            }).start();            if (!oderTypeId.equals(orderno)) {                responJson(orderno);                oderTypeId = orderno;            }            util.Delayed(4000);        }        jsonObject.clear();        order.clear();        clear();    }    public void bind(String msg, Context context) {        final String account = tlfo.getUserName(context);        final String client_id = msg;        new Thread(new Runnable() {            @Override            public void run() {                try {                    OkHttpClient client = new OkHttpClient();                    RequestBody requestBody = new FormBody.Builder()                            .add("account", account)                            .add("client_id", client_id)                            .build();                    Request request = new Request.Builder()                            .url(serviceBindURL)                            .post(requestBody)                            .build();                    Response response = client.newCall(request).execute();                    responseData = response.body().string();                    jsonObject = JSONObject.fromObject(responseData);                    code = jsonObject.getString("code");                    if (code.equals("200")) {                        orderData = jsonObject.getJSONArray("data");                        for (int i = 0; i < orderData.size(); i++) {                            order_type_Name = orderData.getJSONObject(i);                            order_type_data = order_type_Name.getJSONObject("order");                            order_ttyp = order_type_data.getString("order_type");                            switch (order_ttyp) {                                case takoutFood:                                    waimai(order_type_Name, order_type_data, 1);                                    break;                                case restaurant:                                    diannei(order_type_Name, order_type_data, 1);                                    break;                                case restaurantWaiter:                                    waiterdiannei(order_type_Name, order_type_data, 1);                                    break;                                case resevre:                                    yuding(order_type_Name, order_type_data, 1);                                    break;                                default:                                    break;                            }                        }                        clear();                    } else if (code.equals("201")) {                        Log.e("绑定成功", "绑定成功没有数据");                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        }).start();        if (isTypeJson) {            dataJson = tlfo.getShopType(context);        }    }    public void closeSocket(Context context) {        this.webSocketConnection = null;        this.outputStreamOut = null;        Log.d("duankai fuwuqi lianjie", "serviceondestery");        final String user = tlfo.getUserName(context);        new Thread() {            public void run() {                try {                    OkHttpClient client = new OkHttpClient();                    RequestBody requestBody = new FormBody.Builder()                            .add("account", user)                            .build();                    Request request = new Request.Builder()                            .url(socketClose)                            .post(requestBody)                            .build();                    Response response = client.newCall(request).execute();                    Log.e("Response", response + "");                } catch (Exception e) {                    e.printStackTrace();                }            }        }.start();    }    public void IntentOutPut(WebSocketConnection wsC) {        webSocketConnection = wsC;        Log.e("输出流", "服务器链接对象");    }    public static void heartbeat() {        if (webSocketConnection != null) {            new Thread(new Runnable() {                @Override                public void run() {                    try {                        Log.e("content", "心跳检测");                        webSocketConnection.sendTextMessage(PONG);                    } catch (Exception e) {                        e.printStackTrace();                    }                }            }).start();        }    }    public void serviceSendtTest() {        if (webSocketConnection != null) {            webSocketConnection.sendTextMessage(sendTextMessageString);        }    }    public void printTextTest(String Message) {        if (outputStreamOut != null) {            try {                byte[] data = Message.getBytes("gbk");                outputStreamOut.write(ALIGN_CENTER);                outputStreamOut.write(data, 0, data.length);                outputStreamOut.flush();            } catch (IOException e) {            }        }    }    public void send(String sendData, byte[] command) {        if (outputStreamOut != null) {            try {                byte[] data = sendData.getBytes("gbk");                outputStreamOut.write(command);                outputStreamOut.write(data, 0, data.length);                outputStreamOut.flush();            } catch (IOException e) {            }        }    }    public void responJson(String dervice) {        try {            if (webSocketConnection != null) {                JSONObject ClientKey = new JSONObject();                ClientKey.put("orderNo", dervice);                JSONObject Authorization = new JSONObject();                Authorization.put("type", "001");                Authorization.put("data", ClientKey);                webSocketConnection.sendTextMessage(Authorization.toString());            }        } catch (JSONException e) {            e.printStackTrace();        }    }    public void outputGet(OutputStream outputStream) {        this.outputStreamOut = outputStream;    }    //    public static boolean isServiceRunning(Context mContext,String className) {//        boolean isRunning = false;//        ActivityManager activityManager = (ActivityManager)//                mContext.getSystemService(Context.ACTIVITY_SERVICE);//        List<ActivityManager.RunningServiceInfo> serviceList//                = activityManager.getRunningServices(30);//        if (!(serviceList.size()>0)) {//            return false;//        }//        for (int i=0; i<serviceList.size(); i++) {//            if (serviceList.get(i).service.getClassName().equals(className) == true) {//                isRunning = true;//                break;//            }//        }//        return isRunning;//    }}